{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOVL8wlcGttSimSs6nWXKB2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Adeel-abbasi/DS-A/blob/main/20sw018_lab5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Lab#5 - Basics of Pandas"
      ],
      "metadata": {
        "id": "fMR71cCEqhyM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Task#01"
      ],
      "metadata": {
        "id": "zF0npFC6qsd8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "distance_from_sun = [149.6, 1433.5, 227.9, 108.2, 778.6]\n",
        "planets = ['Earth', 'Saturn', 'Mars', 'Venus', 'Jupiter']\n",
        "\n",
        "dist_planets = pd.Series(distance_from_sun, index=planets)\n",
        "\n",
        "speed_of_light = 18  # Speed of light in 10^6 km/minute\n",
        "\n",
        "time_light = dist_planets / speed_of_light\n",
        "\n",
        "close_planets = time_light[time_light < 40]\n",
        "\n",
        "# Print the original distance data\n",
        "print(\"Distance from the Sun (10^6 km):\")\n",
        "print(dist_planets)\n",
        "print()\n",
        "\n",
        "# Print the time for sunlight to reach each planet\n",
        "print(\"Time for sunlight to reach each planet (minutes):\")\n",
        "print(time_light)\n",
        "print()\n",
        "\n",
        "# Print the close planets\n",
        "print(\"Planets where sunlight takes less than 40 minutes to reach:\")\n",
        "print(close_planets)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R7hIKaFKqx1z",
        "outputId": "c7753806-4bca-44ea-9d30-302752d76548"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Distance from the Sun (10^6 km):\n",
            "Earth       149.6\n",
            "Saturn     1433.5\n",
            "Mars        227.9\n",
            "Venus       108.2\n",
            "Jupiter     778.6\n",
            "dtype: float64\n",
            "\n",
            "Time for sunlight to reach each planet (minutes):\n",
            "Earth       8.311111\n",
            "Saturn     79.638889\n",
            "Mars       12.661111\n",
            "Venus       6.011111\n",
            "Jupiter    43.255556\n",
            "dtype: float64\n",
            "\n",
            "Planets where sunlight takes less than 40 minutes to reach:\n",
            "Earth     8.311111\n",
            "Mars     12.661111\n",
            "Venus     6.011111\n",
            "dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Task#02\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Create data series\n",
        "books = pd.Series(data=['Great Expectations', 'Of Mice and Men', 'Romeo and Juliet', 'The Time Machine', 'Alice in Wonderland'])\n",
        "authors = pd.Series(data=['Charles Dickens', 'John Steinbeck', 'William Shakespeare', ' H. G. Wells', 'Lewis Carroll'])\n",
        "user_1 = pd.Series(data=[3.2, np.nan, 2.5])\n",
        "user_2 = pd.Series(data=[5.0, 1.3, 4.0, 3.8])\n",
        "user_3 = pd.Series(data=[2.0, 2.3, np.nan, 4])\n",
        "user_4 = pd.Series(data=[4, 3.5, 4, 5, 4.2])\n",
        "\n",
        "# Create a dictionary with the data\n",
        "dat = {\n",
        "    'Author': authors,\n",
        "    'Book Title': books,\n",
        "    'User 1': user_1,\n",
        "    'User 2': user_2,\n",
        "    'User 3': user_3,\n",
        "    'User 4': user_4\n",
        "}\n",
        "\n",
        "# Use the dictionary to create a Pandas DataFrame\n",
        "book_ratings = pd.DataFrame(dat)\n",
        "\n",
        "# Print the original DataFrame\n",
        "print(\"Original Book Ratings:\")\n",
        "print(book_ratings)\n",
        "print()\n",
        "\n",
        "# Replace NaN values with column averages\n",
        "column_means = book_ratings.mean()\n",
        "book_ratings = book_ratings.fillna({col: column_means[col] for col in book_ratings.columns[2:]})\n",
        "\n",
        "# Print the DataFrame after replacing NaN values\n",
        "print(\"Book Ratings with NaN replaced by Column Averages:\")\n",
        "print(book_ratings)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mUtfFAksq7B8",
        "outputId": "829de480-05bd-4960-e15e-2946e990a39f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Book Ratings:\n",
            "                Author           Book Title  User 1  User 2  User 3  User 4\n",
            "0      Charles Dickens   Great Expectations     3.2     5.0     2.0     4.0\n",
            "1       John Steinbeck      Of Mice and Men     NaN     1.3     2.3     3.5\n",
            "2  William Shakespeare     Romeo and Juliet     2.5     4.0     NaN     4.0\n",
            "3          H. G. Wells     The Time Machine     NaN     3.8     4.0     5.0\n",
            "4        Lewis Carroll  Alice in Wonderland     NaN     NaN     NaN     4.2\n",
            "\n",
            "Book Ratings with NaN replaced by Column Averages:\n",
            "                Author           Book Title  User 1  User 2    User 3  User 4\n",
            "0      Charles Dickens   Great Expectations    3.20   5.000  2.000000     4.0\n",
            "1       John Steinbeck      Of Mice and Men    2.85   1.300  2.300000     3.5\n",
            "2  William Shakespeare     Romeo and Juliet    2.50   4.000  2.766667     4.0\n",
            "3          H. G. Wells     The Time Machine    2.85   3.800  4.000000     5.0\n",
            "4        Lewis Carroll  Alice in Wonderland    2.85   3.525  2.766667     4.2\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-2-947525eb6715>:33: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  column_means = book_ratings.mean()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "W9N5VUwwqpzt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# We import pandas into Python\n",
        "import pandas as pd\n",
        "\n",
        "# We read in a stock data data file into a data frame and see what it looks like\n",
        "df = pd.read_csv('./GOOG.csv')\n",
        "\n",
        "# We display the first 5 rows of the DataFrame\n",
        "df.head()"
      ],
      "metadata": {
        "id": "bTRtXXvYsvtU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " We load the Google stock data into a DataFrame\n",
        "google_stock = pd.read_csv('./GOOG.csv', usecols=['Date', 'Adj Close'], parse_dates=['Date'], index_col=['Date'])\n",
        "\n",
        "# We load the Apple stock data into a DataFrame\n",
        "apple_stock = pd.read_csv('AAPL.csv', usecols=['Date', 'Adj Close'], parse_dates=['Date'], index_col=['Date'])\n",
        "\n",
        "# We load the Amazon stock data into a DataFrame\n",
        "amazon_stock = pd.read_csv('AMZN.csv', usecols=['Date', 'Adj Close'], parse_dates=['Date'], index_col=['Date'])"
      ],
      "metadata": {
        "id": "8pyArZ5yteiy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# We join the Google stock to all_stocks\n",
        "all_stocks = all_stocks.join(google_stock)\n",
        "\n",
        "# We join the Apple stock to all_stocks\n",
        "all_stocks = all_stocks.join(apple_stock)\n",
        "\n",
        "# We join the Amazon stock to all_stocks\n",
        "all_stocks = all_stocks.join(amazon_stock)"
      ],
      "metadata": {
        "id": "eyVIW8cEtlGx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check if there are any NaN values in the all_stocks dataframe\n",
        "nan_check = all_stocks.isna().any()\n",
        "\n",
        "# Print columns with NaN values\n",
        "print(nan_check)\n",
        "\n",
        "# Remove any rows that contain NaN values\n",
        "all_stocks = all_stocks.dropna()"
      ],
      "metadata": {
        "id": "-vy68mY7t1x4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the average stock price for each stock\n",
        "print(\"Average Stock Price:\")\n",
        "print(all_stocks.mean())\n",
        "\n",
        "# Print the median stock price for each stock\n",
        "print(\"\\nMedian Stock Price:\")\n",
        "print(all_stocks.median())\n",
        "\n",
        "# Print the standard deviation of the stock price for each stock\n",
        "print(\"\\nStandard Deviation of Stock Price:\")\n",
        "print(all_stocks.std())\n",
        "\n",
        "# Print the correlation between stocks\n",
        "print(\"\\nCorrelation between Stocks:\")\n",
        "print(all_stocks.corr())"
      ],
      "metadata": {
        "id": "xqylLBhMt7fq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# this allows plots to be rendered in the notebook\n",
        "%matplotlib inline\n",
        "\n",
        "# We import matplotlib into Python\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# We plot the Google stock data\n",
        "plt.plot(all_stocks['Google'])\n",
        "\n",
        "# We plot the rolling mean ontop of our Google stock data\n",
        "plt.plot(rollingMean)\n",
        "plt.legend(['Google Stock Price', 'Rolling Mean'])\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CE_F3DWCuCSC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}